name: release

on:
  push:
    branches:
      - dev
      - master

jobs:
  tag_git:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      tag_version: ${{ steps.set_tag_version.outputs.tag_version }}
    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: get version
        id: version
        run: |
          echo "version=$(cat VERSION)" >> "$GITHUB_OUTPUT"

      - name: Set tag version
        id: set_tag_version
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/dev" ]]; then
            echo "tag_version=${{ steps.version.outputs.version }}-pre" >> "$GITHUB_OUTPUT"
          else
            echo "tag_version=${{ steps.version.outputs.version }}" >> "$GITHUB_OUTPUT"
          fi
      
      - uses: actions/setup-go@v5
        with:
          go-version: '>=1.17.0'
          check-latest: true

      # Install dependencies
      - name: Run tests
        run: |
          cd ./mkdotenv &&\
          rm -rf ./tools &&\
          go mod tidy &&\
          go test ./...
     
      - name: Tag version
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.set_tag_version.outputs.tag_version }}
        
      - name: Push tags
        run: git push --tags
  
  build_docker:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/master'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: release_image
        if: github.ref == 'refs/heads/master'
        run:
          make docker-push


  alpine_source:
    runs-on: ubuntu-latest
    needs: tag_git
    
    permissions:
      contents: write
    
    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0       

      - name: make tar
        id: make_tar
        run:
          echo "tar_file=$(bash ./alpinebuild/make_tar.sh)" >> "$GITHUB_OUTPUT" 

      - name: make apkfile
        run:
          bash ./alpinebuild/release_apkfile.sh

      - name: Upload Source Tarball
        uses: actions/upload-artifact@v4
        with:
          name: mkdotenv-source-tar
          path: |
            ./alpinebuild/${{ env.make_tar.tar_file }}
            ./alpinebuild/APKFILE
          if-no-files-found: error

  alpine_apk:
    runs-on: ubuntu-latest
    needs: tag_git
    
    permissions:
      contents: write
    
    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0   

      - name: make_apk
        run: |
          cd ./alpinebuild &&\
          bash make_apk.sh &&\
          ls -l ./release/home/x86_64

      - name: Upload apk
        uses: actions/upload-artifact@v4
        with:
          name: mkdotenv-apk
          path: |
            ./alpinebuild/release/home/x86_64/mkdotenv*-r0.apk
          if-no-files-found: error

  build_bin:
    runs-on: ubuntu-latest
    needs: tag_git
    
    permissions:
      contents: write

    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: actions/setup-go@v5
        with:
          go-version: '>=1.17.0'
          check-latest: true

      - name: build
        run: make bin COMPILED_BIN_PATH="/tmp/mkdotenv"

      - name: build_windows
        run: make bin OS=windows COMPILED_BIN_PATH="/tmp/mkdotenv.exe"

      - name: Upload Binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: mkdotenv-bin
          path: |
            ./bin/mkdotenv-linux-amd64
            ./bin/mkdotenv-windows-amd64.exe
          if-no-files-found: error
  
  build_mac:
    runs-on: macos-latest
    needs: tag_git
    
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: actions/setup-go@v5
        with:
          go-version: '>=1.17.0'
          check-latest: true

      - name: build_mac
        run: bash ./macos/build.sh

      - name: list_macos_bin
        run: ls -l ./bin

      - name: Upload Binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: mkdotenv-macos
          path: |
            ./bin/mkdotenv-darwin-arm64
            ./mkdotenv-macos.zip
          if-no-files-found: error

  build_deb:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: tag_git
    steps:

      - uses: actions/checkout@v4
        with:
         fetch-depth: 0
      
      - name: Import GPG Key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_SECRET }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          KEY_ID=$(gpg --list-secret-keys --keyid-format=long | awk '/sec/{print $2}' | cut -d'/' -f2)
          echo "DEB_SIGN_KEYID=$KEY_ID" >> $GITHUB_ENV

      - name: Install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install golang-1.23-go debhelper make build-essential debhelper equivs

      - name: Show Key ID
        run: echo "Using DEB_SIGN_KEYID=$DEB_SIGN_KEYID"

      - name: build
        run: make deb
   
      - name: Upload DEB artifact
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: mkdotenv-deb
          path: mkdotenv*.deb  


  build_rpm:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: tag_git
    steps:

      - uses: actions/checkout@v4
        with:
         fetch-depth: 0
      
      - id: build_docker
        run: bash ./fedora/build_fedora_docker.sh

      - name: list rpms
        run: ls -l rpmbuild/RPMS/x86_64/

      - name: Upload RPM artifact
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: mkdotenv-rpm
          path: rpmbuild/RPMS/x86_64/mkdotenv*.rpm  

  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:

      - tag_git
      - build_bin
      - build_mac
      - build_deb
      - build_rpm
      - alpine_source
      - alpine_apk

    steps:

      - uses: actions/checkout@v4
        with:
         fetch-depth: 0

      - name: Download Alpine Source code artifact
        uses: actions/download-artifact@v4
        with:
          name: mkdotenv-source-tar

      - name: Download Alpine apk artifact
        uses: actions/download-artifact@v4
        with:
          name: mkdotenv-apk

      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: mkdotenv-bin
          path: ./bin

      - name: Download macos artifact
        uses: actions/download-artifact@v4
        with:
          name: mkdotenv-macos
          path: ./bin

      - name: "List Bin"
        run: ls -l ./bin

      - name: "List Bin"
        run: ls -l ./bin/bim
      
      - name: "List files"
        run: ls -l ./*.zip

      - name: Download DEB artifact
        uses: actions/download-artifact@v4
        with:
          name: mkdotenv-deb
      
      - name: Download RPM artifact
        uses: actions/download-artifact@v4
        with:
          name: mkdotenv-rpm

      - name: Create a GitHub pre release
        uses: ncipollo/release-action@v1
        if:  github.ref == 'refs/heads/dev'
        with:
          tag: "v${{needs.tag_git.outputs.tag_version}}"
          allowUpdates: true
          prerelease: true
          artifacts: |
            ./bin/mkdotenv-linux-amd64,
            ./bin/mkdotenv-windows-amd64.exe,
            ./bin/bin/mkdotenv-darwin-arm64,
            mkdotenv-macos.zip,
            mkdotenv*.deb,
            mkdotenv*.rpm, 
            mkdotenv*.tar.gz,
            APKFILE,
            mkdotenv*-r0.apk,
            ./aur/PKGBUILD
          bodyFile: RELEASE_NOTES

      - name: Create a GitHub release
        if:  github.ref == 'refs/heads/master'
        uses: ncipollo/release-action@v1
        with:
          tag: "v${{needs.tag_git.outputs.tag_version}}"
          allowUpdates: true
          prerelease:  false
          artifacts: |
            ./bin/mkdotenv-linux-amd64,
            ./bin/mkdotenv-windows-amd64.exe,
            ./bin/bin/mkdotenv-darwin-arm64,
            mkdotenv-macos.zip,
            mkdotenv*.deb,
            mkdotenv*.rpm, 
            mkdotenv*.tar.gz,
            APKFILE,
            mkdotenv*-r0.apk,
            ./aur/PKGBUILD
          bodyFile: RELEASE_NOTES
      